/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Vector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import java.sql.ResultSetMetaData;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gaura
 */
public class hw3 extends javax.swing.JFrame {

    /**
     * Creates new form hw3
     */
    private static Connection connection;
    private static String finalQuery;
    private static int Querylengthstage1;
    private static int Querylengthstage2;
    private static int Querylengthstage3;

    public hw3() {
        initComponents();
        DB_Helper db = new DB_Helper();
        connection = db.getConnection();

        fillGenreList();
        queryBox.setLineWrap(true);
        finalQuery = "";

    }

    public static ResultSet runSelectQuery(String Query) {
        ResultSet rs = null;
        try {
            PreparedStatement selectStatement = connection.prepareStatement(Query);
            rs = selectStatement.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return rs;
    }

    private void fillGenreList() {
        String query = "Select Distinct(genre) From MOVIE_GENRE ORDER BY genre";
        ResultSet rs = runSelectQuery(query);
        Vector<String> vector = new Vector<String>();
        try {
            while (rs.next()) {
                vector.add(rs.getString(1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            genreList.setListData(vector);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        genreList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        countryList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        locationList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ratingComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        ratingValue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        reviewValue = new javax.swing.JTextField();
        reviewComboBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        From_Year = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        To_Year = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tagList = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        tagWeightComp = new javax.swing.JComboBox<>();
        tagWeightValue = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tagCount = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        searchType = new javax.swing.JComboBox<>();
        fetchCountryButton = new javax.swing.JButton();
        fetchLocationButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        queryBox = new javax.swing.JTextArea();
        execQueryButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        rowCount = new javax.swing.JTextField();
        resultPanel = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        resCountry = new javax.swing.JTextPane();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        resLocation = new javax.swing.JTextPane();
        jLabel20 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        genresResults = new javax.swing.JTextPane();

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        genreList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                genreListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(genreList);

        countryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                countryListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(countryList);

        locationList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "  " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        locationList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                locationListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(locationList);

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Genre");
        jLabel1.setOpaque(true);

        jLabel2.setBackground(new java.awt.Color(51, 51, 51));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Country");
        jLabel2.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(51, 51, 51));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Location");
        jLabel3.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ratingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));
        ratingComboBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                ratingComboBoxInputMethodTextChanged(evt);
            }
        });
        ratingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Rating:");

        ratingValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingValueActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Value:");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Reviews");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Value");

        reviewValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewValueActionPerformed(evt);
            }
        });

        reviewComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));
        reviewComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewComboBoxActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(51, 51, 51));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Movie Year");
        jLabel12.setOpaque(true);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("From");

        From_Year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                From_YearActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("To");

        To_Year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                To_YearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(To_Year, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(From_Year, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reviewValue)
                            .addComponent(ratingComboBox, 0, 78, Short.MAX_VALUE)
                            .addComponent(ratingValue)
                            .addComponent(reviewComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ratingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ratingValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reviewComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(reviewValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(From_Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(To_Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel4.setBackground(new java.awt.Color(51, 51, 51));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Critics' Ratings");
        jLabel4.setOpaque(true);

        jLabel7.setBackground(new java.awt.Color(51, 51, 51));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Movie Tags Value");
        jLabel7.setOpaque(true);

        jScrollPane4.setViewportView(tagList);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Tag Weight");

        tagWeightComp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        tagWeightValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagWeightValueActionPerformed(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Value");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("No of Tags");

        tagCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagCountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tagWeightComp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(tagCount))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tagWeightValue)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(tagWeightComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tagWeightValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(tagCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Search Attributes By:");

        searchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        fetchCountryButton.setText("Fetch Country");
        fetchCountryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fetchCountryButtonMouseClicked(evt);
            }
        });
        fetchCountryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchCountryButtonActionPerformed(evt);
            }
        });

        fetchLocationButton.setText("Fetch Location");
        fetchLocationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fetchLocationButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fetchCountryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fetchLocationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(searchType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fetchCountryButton)
                    .addComponent(fetchLocationButton))
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setBackground(new java.awt.Color(51, 51, 51));
        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Query");
        jLabel17.setOpaque(true);

        queryBox.setColumns(20);
        queryBox.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        queryBox.setRows(5);
        jScrollPane5.setViewportView(queryBox);

        execQueryButton.setText("Execute Query");
        execQueryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                execQueryButtonMouseClicked(evt);
            }
        });
        execQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execQueryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
            .addComponent(execQueryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(execQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel19.setBackground(new java.awt.Color(153, 153, 153));
        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Count");
        jLabel19.setOpaque(true);

        rowCount.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        resultPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultPanelMouseClicked(evt);
            }
        });

        resultTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Movie Id", "Title", "Year"
            }
        ));
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        resultPanel.setViewportView(resultTable);

        jScrollPane8.setViewportView(resCountry);

        jLabel21.setText("Country");

        jScrollPane7.setViewportView(resLocation);

        jLabel20.setText("Locations");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(rowCount)
                    .addComponent(jScrollPane8)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rowCount, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel18.setBackground(new java.awt.Color(51, 51, 51));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Result");
        jLabel18.setOpaque(true);

        jLabel22.setText("Genres");

        jScrollPane9.setViewportView(genresResults);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ratingValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingValueActionPerformed
        // TODO add your handling code here:
        String equality = String.valueOf(ratingComboBox.getSelectedItem());     //equality expression
        String ratingValue = this.ratingValue.getText().trim();

        System.out.println(equality);
        System.out.println(ratingValue);

        String tempQuery = finalQuery.substring(0, Querylengthstage1);

        if (ratingValue.equals("")) {
            return;
        } else {
            finalQuery = tempQuery + " AND avgRating " + equality + "  " + ratingValue;
        }

        System.out.println("finalQuery =" + finalQuery);
        queryBox.setText(finalQuery);
        Querylengthstage2 = finalQuery.length();
    }//GEN-LAST:event_ratingValueActionPerformed

    private void reviewComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewComboBoxActionPerformed

        String equality = String.valueOf(reviewComboBox.getSelectedItem());     //equality expression
        String reviewValue = this.reviewValue.getText().trim();

        System.out.println(equality);
        System.out.println(reviewValue);

        String tempQuery = finalQuery.substring(0, Querylengthstage2);

        if (reviewValue.equals("")) {
            return;
        } else {
            finalQuery = tempQuery + " AND avgNumReview " + equality + "  " + reviewValue;
        }

        System.out.println("finalQuery =" + finalQuery);
        queryBox.setText(finalQuery);

    }//GEN-LAST:event_reviewComboBoxActionPerformed

    private void From_YearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_From_YearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_From_YearActionPerformed

    private void fetchCountryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchCountryButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fetchCountryButtonActionPerformed

    private void execQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execQueryButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Exec Button Clicked!!");
        resLocation.setText("");
        genresResults.setText("");
        resCountry.setText("");
        //finalQuery = finalQuery + " ORDER BY length(MOVIEID),MOVIEID ASC";
        ResultSet rs = runSelectQuery(finalQuery);
        //Vector<String> vector = new Vector<String>();

        ResultSetMetaData metaData;
        try {
            metaData = rs.getMetaData();
            Vector<String> columnNames = new Vector<String>();
            int columnCount = metaData.getColumnCount();
            for (int column = 1; column <= columnCount; column++) {
                columnNames.add(metaData.getColumnName(column));
            }

            // data of the table
            Vector<Vector<String>> data = new Vector<Vector<String>>();
            int rows = 0;
            while (rs.next()) {
                rows++;
                Vector<String> vector2 = new Vector<String>();
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    vector2.add(rs.getString(columnIndex));
                }
                data.add(vector2);
            }
            resultTable.setModel(new DefaultTableModel(data, columnNames));
            //set count
            rowCount.setText(Integer.toString(rows));
            JOptionPane.showMessageDialog(this, "No of Rows Matched = "+rows);
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_execQueryButtonActionPerformed

    private void fetchCountryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fetchCountryButtonMouseClicked
        // TODO add your handling code here:

        //fetch distinct countries
        List<String> selectedGenre = genreList.getSelectedValuesList();
        if (selectedGenre.size() < 1) {
            JOptionPane.showMessageDialog(this, "Please select some genre!");
            return;
        }
        String selection = String.valueOf(searchType.getSelectedItem());     // AND | OR
        String mod = "";

        String query = "";
        for (String genre : selectedGenre) {
            //System.out.println(genre);
            mod = mod + "'" + genre + "', ";
        }
        mod = mod.substring(0, mod.length() - 2);

        System.out.println("mod=" + mod);

        if (selection.equals("AND")) {
            query = "Select Distinct(country) From MOVIE_COUNTRIES where movieID In (select movieID From MOVIE_GENRE where Genre IN (" + mod + ") "
                    + "Group By movieID "
                    + "Having count(genre) = " + selectedGenre.size() + ")";
        } else {
            query = "Select Distinct(country) From MOVIE_COUNTRIES where movieID In (select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + mod + " ) )";
        }

        System.out.println("fetch country query=" + query);

        try (ResultSet rs = runSelectQuery(query)) {
            Vector<String> vector = new Vector<String>();
            while (rs.next()) {
                vector.add(rs.getString(1));
            }
            countryList.setListData(vector);
        } catch (SQLException exp) {
            exp.printStackTrace();
        }

    }//GEN-LAST:event_fetchCountryButtonMouseClicked

    private void fetchLocationButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fetchLocationButtonMouseClicked
        // TODO add your handling code here:

        List<String> selectedGenre = genreList.getSelectedValuesList();
        if (selectedGenre.size() < 1) {
            JOptionPane.showMessageDialog(this, "Please select some genre!");
            return;
        }
        String selection = String.valueOf(searchType.getSelectedItem());     // AND | OR
        String mod = "";

        String part1 = "";
        for (String genre : selectedGenre) {
            //System.out.println(genre);
            mod = mod + "'" + genre + "', ";
        }
        part1 = mod.substring(0, mod.length() - 2);

        //System.out.println("part1=" + part1);

        mod = "";
        String part2 = "";

        List<String> selectedCountries = countryList.getSelectedValuesList();
        //if no selected countries then just use genres to get all the locations
        if (selectedCountries.size() < 1) {
            //JOptionPane.showMessageDialog(this, "Please select some countries!");
            String query;
            if (selection.equals("AND")) {
                query = "select movieID From MOVIE_GENRE where Genre IN (" + part1 + ") "
                        + "Group By movieID "
                        + "Having count(genre) = " + selectedGenre.size();
            } else {
                query = "select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + part1 + " )";
            }

            query = "Select distinct(location1) From MOVIE_LOCATIONS where movieID In (" + query + ")";

            System.out.println("location query=" + query);

            try (ResultSet rs = runSelectQuery(query)) {
                Vector<String> vector = new Vector<String>();
                while (rs.next()) {
                    vector.add(rs.getString(1));
                }
                locationList.setListData(vector);
            } catch (SQLException exp) {
                exp.printStackTrace();
            }

            return;
        }
        //if we can countries selected
        for (String country : selectedCountries) {
            //System.out.println(country);
            mod = mod + " country = " + "'" + country + "' " + selection + " ";
        }

        if (selection.equals("AND")) {
            part2 = mod.substring(0, mod.length() - 4);
        } else {
            part2 = mod.substring(0, mod.length() - 3);
        }

        //System.out.println("part2 query=" + part2);

        String query;

        if (selection.equals("AND")) {
            query = "Select movieID From MOVIE_COUNTRIES where movieID In (select movieID From MOVIE_GENRE where Genre IN (" + part1 + ") "
                    + "Group By movieID "
                    + "Having count(genre) = " + selectedGenre.size() + ")"
                    + " AND (" + part2 + ")";
        } else {
            query = "Select movieID From MOVIE_COUNTRIES where movieID In (select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + part1 + " ) )"
                    + " AND (" + part2 + ")";
        }

        query = "Select distinct(location1) From MOVIE_LOCATIONS where movieID In (" + query + ")";

        System.out.println("location query=" + query);

        try (ResultSet rs = runSelectQuery(query)) {
            Vector<String> vector = new Vector<String>();
            while (rs.next()) {
                vector.add(rs.getString(1));
            }
            locationList.setListData(vector);
        } catch (SQLException exp) {
            exp.printStackTrace();
        }
    }//GEN-LAST:event_fetchLocationButtonMouseClicked

    private void genreListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_genreListValueChanged
        // TODO add your handling code here:

        List<String> selectedGenre = genreList.getSelectedValuesList();
        if (selectedGenre.size() < 1) {
            JOptionPane.showMessageDialog(this, "Please select some genre!");
            return;
        }
        String selection = String.valueOf(searchType.getSelectedItem());     // AND | OR
        String mod = "";

        String query = "";
        for (String genre : selectedGenre) {
            //System.out.println(genre);
            mod = mod + "'" + genre + "', ";
        }
        mod = mod.substring(0, mod.length() - 2);

        //System.out.println("mod=" + mod);

        if (selection.equals("AND")) {
            query = "Select movieID,title,year,avgRating,avgNumReview From MOVIES where movieID In (select Distinct(movieID) From MOVIE_GENRE where Genre IN (" + mod + ") "
                    + "Group By movieID "
                    + "Having count(genre) = " + selectedGenre.size() + ")";
        } else {
            query = "Select movieID,title,year,avgRating,avgNumReview From MOVIES where movieID In (select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + mod + " ) )";
        }
        finalQuery = query;
        System.out.println("Final query=" + finalQuery);
        queryBox.setText(finalQuery);

        Querylengthstage1 = finalQuery.length();
    }//GEN-LAST:event_genreListValueChanged

    private void countryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_countryListValueChanged
        // TODO add your handling code here:
        List<String> selectedGenre = genreList.getSelectedValuesList();
        if (selectedGenre.size() < 1) {
            JOptionPane.showMessageDialog(this, "Please select some genre!");
            return;
        }
        String selection = String.valueOf(searchType.getSelectedItem());     // AND | OR
        String mod = "";

        String part1 = "";
        for (String genre : selectedGenre) {
            //System.out.println(genre);
            mod = mod + "'" + genre + "', ";
        }
        part1 = mod.substring(0, mod.length() - 2);

        //System.out.println("part1=" + part1);

        mod = "";
        String part2 = "";

        List<String> selectedCountries = countryList.getSelectedValuesList();
        if (selectedCountries.size() < 1) {
            //JOptionPane.showMessageDialog(this, "Please select some countries!");
            return;
        }

        for (String country : selectedCountries) {
            //System.out.println(country);
            mod = mod + " country = " + "'" + country + "' " + selection + " ";
        }

        if (selection.equals("AND")) {
            part2 = mod.substring(0, mod.length() - 4);
        } else {
            part2 = mod.substring(0, mod.length() - 3);
        }

        //System.out.println("part2 query=" + part2);

        String query;

        if (selection.equals("AND")) {
            query = "Select movieID From MOVIE_COUNTRIES where movieID In (select movieID From MOVIE_GENRE where Genre IN (" + part1 + ") "
                    + "Group By movieID "
                    + "Having count(genre) = " + selectedGenre.size() + ")"
                    + " AND (" + part2 + ")";
        } else {
            query = "Select movieID From MOVIE_COUNTRIES where movieID In (select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + part1 + " ) )"
                    + " AND (" + part2 + ")";
        }

        query = "Select movieID,title,year,avgRating,avgNumReview From MOVIES where movieID In (" + query + ")";

        finalQuery = query;
        System.out.println("Final query=" + finalQuery);
        queryBox.setText(finalQuery);

        Querylengthstage1 = finalQuery.length();

    }//GEN-LAST:event_countryListValueChanged

    private void execQueryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_execQueryButtonMouseClicked
        // TODO add your handling code here:      
    }//GEN-LAST:event_execQueryButtonMouseClicked

    private void locationListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_locationListValueChanged
        // TODO add your handling code here:                                                        
        List<String> selectedGenre = genreList.getSelectedValuesList();
        if (selectedGenre.size() < 1) {
            JOptionPane.showMessageDialog(this, "Please select some genre!");
            return;
        }
        String selection = String.valueOf(searchType.getSelectedItem());     // AND | OR
        String mod = "";

        String part1 = "";
        for (String genre : selectedGenre) {
            //System.out.println(genre);
            mod = mod + "'" + genre + "', ";
        }
        part1 = mod.substring(0, mod.length() - 2);

        //System.out.println("part1=" + part1);

        mod = "";
        String part2 = "";
        String part3 = "";

        List<String> selectedCountries = countryList.getSelectedValuesList();
        //if no countries where selected
        if (selectedCountries.size() < 1) {
            List<String> selectedLocation = locationList.getSelectedValuesList();
            if (selectedLocation.size() < 1) {
                //JOptionPane.showMessageDialog(this, "Please select some Location!");
                return;
            }

            for (String location : selectedLocation) {
                mod = mod + "'" + location + "', ";
            }

            part3 = mod.substring(0, mod.length() - 2);
            //System.out.println("part3 query=" + part3);

            String query;

            if (selection.equals("AND")) {
                query = "select movieID from MOVIE_LOCATIONS WHERE MOVIEID IN (select movieID From MOVIE_GENRE where Genre IN (" + part1 + ") "
                        + "Group By movieID "
                        + "Having count(genre) = " + selectedGenre.size() + ")"
                        + " AND location1 IN (" + part3 + ") GROUP BY movieID "
                        + " Having count(DISTINCT location1) = " + selectedLocation.size();
            } else {
                query = "select movieID from MOVIE_LOCATIONS WHERE MOVIEID IN (select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + part1 + " ) )"
                        + " AND location1 IN (" + part3 + ")";
            }

            query = "Select movieID,title,year,avgRating,avgNumReview From MOVIES where movieID In (" + query + ")";

            finalQuery = query;
            System.out.println("Final query=" + finalQuery);
            queryBox.setText(finalQuery);
            Querylengthstage1 = finalQuery.length();
            return;
        }

        for (String country : selectedCountries) {
            mod = mod + " country = " + "'" + country + "' " + selection + " ";
        }

        if (selection.equals("AND")) {
            part2 = mod.substring(0, mod.length() - 4);
        } else {
            part2 = mod.substring(0, mod.length() - 3);
        }

        //System.out.println("part2 query=" + part2);

        mod = "";
        part3 = "";

        List<String> selectedLocation = locationList.getSelectedValuesList();
        if (selectedLocation.size() < 1) {
            //JOptionPane.showMessageDialog(this, "Please select some Location!");
            return;
        }

        for (String location : selectedLocation) {
            mod = mod + "'" + location + "', ";
        }

        part3 = mod.substring(0, mod.length() - 2);
        //System.out.println("part3 query=" + part3);

        String query;

        if (selection.equals("AND")) {
            query = "select movieID from MOVIE_LOCATIONS WHERE MOVIEID IN  (Select movieID From MOVIE_COUNTRIES where movieID In (select movieID From MOVIE_GENRE where Genre IN (" + part1 + ") "
                    + "Group By movieID "
                    + "Having count(genre) = " + selectedGenre.size() + ")"
                    + " AND (" + part2 + ")" + ")"
                    + " AND location1 IN (" + part3 + ") GROUP BY movieID "
                    + " Having count(DISTINCT location1) = " + selectedLocation.size();
        } else {
            query = "select movieID from MOVIE_LOCATIONS WHERE MOVIEID IN ( Select movieID From MOVIE_COUNTRIES where movieID In (select Distinct(movieID) From MOVIE_GENRE where Genre IN(" + part1 + " ) )"
                    + " AND (" + part2 + ")" + ")"
                    + " AND location1 IN (" + part3 + ")";
        }

        query = "Select movieID,title,year,avgRating,avgNumReview From MOVIES where movieID In (" + query + ")";

        finalQuery = query;
        System.out.println("Final query=" + finalQuery);
        queryBox.setText(finalQuery);
        Querylengthstage1 = finalQuery.length();
    }//GEN-LAST:event_locationListValueChanged

    private void ratingComboBoxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ratingComboBoxInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_ratingComboBoxInputMethodTextChanged

    private void ratingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingComboBoxActionPerformed

        String equality = String.valueOf(ratingComboBox.getSelectedItem());     //equality expression
        String ratingValue = this.ratingValue.getText().trim();

        System.out.println(equality);
        System.out.println(ratingValue);

        String tempQuery = finalQuery.substring(0, Querylengthstage1);

        if (ratingValue.equals("")) {
            return;
        } else {
            finalQuery = tempQuery + " AND avgRating " + equality + "  " + ratingValue;
        }

        System.out.println("finalQuery =" + finalQuery);
        queryBox.setText(finalQuery);
        Querylengthstage2 = finalQuery.length();
    }//GEN-LAST:event_ratingComboBoxActionPerformed

    private void reviewValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewValueActionPerformed
        // TODO add your handling code here:
        String equality = String.valueOf(reviewComboBox.getSelectedItem());     //equality expression
        String reviewValue = this.reviewValue.getText().trim();

        System.out.println(equality);
        System.out.println(reviewValue);

        String tempQuery = finalQuery.substring(0, Querylengthstage2);

        if (reviewValue.equals("")) {
            return;
        } else {
            finalQuery = tempQuery + " AND avgNumReview " + equality + "  " + reviewValue;
        }

        System.out.println("finalQuery =" + finalQuery);
        queryBox.setText(finalQuery);
        Querylengthstage2 = finalQuery.length();
    }//GEN-LAST:event_reviewValueActionPerformed

    private void To_YearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_To_YearActionPerformed
        // TODO add your handling code here:
        String fromYear = this.From_Year.getText().trim();
        String toYear = this.To_Year.getText().trim();

        String ratingValue = this.ratingValue.getText().trim();
        String reviewValue = this.reviewValue.getText().trim();

        String tempQuery;

        if (ratingValue.isEmpty() && reviewValue.isEmpty()) {
            tempQuery = finalQuery.substring(0, Querylengthstage1);
        } else {
            tempQuery = finalQuery.substring(0, Querylengthstage2);
        }

        System.out.println(fromYear);
        System.out.println(toYear);

        if (fromYear.equals("") && !toYear.equals("")) {
            finalQuery = tempQuery + " AND year <= " + toYear;
        } else if (!fromYear.equals("") && toYear.equals("")) {
            finalQuery = tempQuery + " AND year >= " + fromYear;
        } else {
            finalQuery = tempQuery + " AND year Between " + fromYear + " AND " + toYear;
        }

        System.out.println("finalQuery =" + finalQuery);
        queryBox.setText(finalQuery);
        Querylengthstage3 = finalQuery.length();
    }//GEN-LAST:event_To_YearActionPerformed

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        // TODO add your handling code here:

        String id = resultTable.getValueAt(resultTable.getSelectedRow(), 0).toString();
        System.out.println("movieId=" + id);
        String countryQuery = "Select country from MOVIE_COUNTRIES where movieId ='" + id + "'";
        ResultSet res = runSelectQuery(countryQuery);

        String locationQuery = "Select Distinct(location1) from MOVIE_LOCATIONS where movieId ='" + id + "'";
        ResultSet resLoc = runSelectQuery(locationQuery);
        String locations = "";

        String genreQuery = "Select genre from MOVIE_GENRE where movieID ='" + id + "'";
        ResultSet resGenre = runSelectQuery(genreQuery);
        String genres = "";
        try {
            while (res.next()) {
                resCountry.setText(res.getString(1));
            }
            while (resLoc.next()) {
                locations += resLoc.getString(1) + ", ";
            }
            while (resGenre.next()) {
                genres += resGenre.getString(1) + ", ";
            }

            if (!locations.isEmpty()) {
                resLocation.setText(locations.substring(0, locations.length() - 2));
            } else {
                resLocation.setText("");
            }

            if (!genres.isEmpty()) {
                genresResults.setText(genres.substring(0, genres.length() - 2));
            } else {
                genresResults.setText("");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_resultTableMouseClicked

    private void resultPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultPanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_resultPanelMouseClicked

    private void tagCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tagCountActionPerformed

    private void tagWeightValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagWeightValueActionPerformed
        // TODO add your handling code here:
        String equality = String.valueOf(tagWeightComp.getSelectedItem());
        String tagWeightValue = this.tagWeightValue.getText().trim();
        String tagQuery;
        if (tagWeightValue.equals("")) {
            tagQuery = "Select distinct(value) from Tags where ID IN (Select Distinct(tagID) from MOVIE_TAGS Where MovieId IN( select movieID from (" + finalQuery + ")))";
        } else {
            tagQuery = "Select distinct(value) from Tags where ID IN (Select Distinct(tagID) from MOVIE_TAGS Where tagWeight" + equality + tagWeightValue + " AND MovieId IN( select movieID from (" + finalQuery + ")))";
        }

        System.out.println("tagQuery=" + tagQuery);

        ResultSet rs = runSelectQuery(tagQuery);
        int count = 0;
        Vector<String> vector = new Vector<String>();
        try {
            while (rs.next()) {
                vector.add(rs.getString(1));
                count++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            tagList.setListData(vector);
            tagCount.setText(Integer.toString(count));
        }
    }//GEN-LAST:event_tagWeightValueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField From_Year;
    private javax.swing.JTextField To_Year;
    private javax.swing.JList<String> countryList;
    private javax.swing.JButton execQueryButton;
    private javax.swing.JButton fetchCountryButton;
    private javax.swing.JButton fetchLocationButton;
    private javax.swing.JList<String> genreList;
    private javax.swing.JTextPane genresResults;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JList<String> locationList;
    private javax.swing.JTextArea queryBox;
    private javax.swing.JComboBox<String> ratingComboBox;
    private javax.swing.JTextField ratingValue;
    private javax.swing.JTextPane resCountry;
    private javax.swing.JTextPane resLocation;
    private javax.swing.JScrollPane resultPanel;
    private javax.swing.JTable resultTable;
    private javax.swing.JComboBox<String> reviewComboBox;
    private javax.swing.JTextField reviewValue;
    private javax.swing.JTextField rowCount;
    private javax.swing.JComboBox<String> searchType;
    private javax.swing.JTextField tagCount;
    private javax.swing.JList<String> tagList;
    private javax.swing.JComboBox<String> tagWeightComp;
    private javax.swing.JTextField tagWeightValue;
    // End of variables declaration//GEN-END:variables
}
